// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

enum UserRole {
    ADMIN
    USER
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  password String?
  role UserRole @default(USER)
  accounts Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings Booking[]
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Difficulty {
  EASY
  MIDDLE
  HARD
}

model Tour {
  id String @id @default(uuid())
  name String
  difficulty Difficulty @default(EASY)
  //priceInCents Int
  price Int
  imagePath String
  description String
  isAvailableForBooking Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings Booking[]
  totalCapacity Int
  departure DateTime
  arrival DateTime
}

model Booking {
  id String @id @default(uuid())
  //pricePaidInCents Int
  pricePaid Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  tourId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Restrict)
}
